generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(cuid())
  email          String     @unique
  name           String?
  image          String?     
  emailVerified  DateTime?   
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  subscription   Boolean    @default(false)
  

  // relations
  progress       Progress[]
  accounts       Account[]
  sessions       Session[]
}



model Course {
  id          String    @id @default(cuid())
  title       String
  description String
  sections    Section[]
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Section {
  id          String      @id @default(cuid())
  title       String
  order       Int
  course      Course      @relation(fields: [courseId], references: [id])
  courseId    String
  subsections Subsection[]
}

model Challenge {
  id           String     @id @default(cuid())
  prompt       String
  starterCode  String
  solution     String
  testCases    String     // JSON string
  subsection   Subsection @relation(fields: [subsectionId], references: [id])
  subsectionId String     @unique
}

model Subsection {
  id        String    @id @default(cuid())
  title     String
  text      String
  videoUrl  String?
  order     Int
  section   Section   @relation(fields: [sectionId], references: [id])
  sectionId String
  challenge Challenge?
  progress  Progress[]   // ðŸ‘ˆ add this line (opposite relation)
}

model Progress {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  subsection   Subsection @relation(fields: [subsectionId], references: [id])
  subsectionId String
  completed    Boolean    @default(false)
  score        Int?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
